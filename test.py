import tkinter as tk
from tkinter import ttk, scrolledtext
from PIL import ImageGrab, Image, ImageTk
import pytesseract
from PIL import Image

class OCRMelamineApp:
    def __init__(self, root):
        self.root = root
        self.root.title("OCR M√£ H√≥a Melamine")
        self.root.geometry("900x700")

        self.setup_ui()

    def setup_ui(self):
        # ===== Button d√°n ·∫£nh t·ª´ clipboard =====
        self.btn_paste = ttk.Button(self.root, text="üìã D√°n ·∫£nh t·ª´ Clipboard", command=self.paste_image)
        self.btn_paste.pack(pady=10)

        # ===== Frame ch·ª©a Canvas + Scrollbar =====
        frame_canvas = tk.Frame(self.root, bd=2, relief=tk.SUNKEN)
        frame_canvas.pack(padx=10, pady=5, fill=tk.BOTH, expand=True)

        # Canvas c√≥ th·ªÉ scroll
        self.canvas = tk.Canvas(frame_canvas, bg="#f8f8f8")
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Scrollbar d·ªçc v√† ngang
        self.scrollbar_y = ttk.Scrollbar(frame_canvas, orient="vertical", command=self.canvas.yview)
        self.scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.configure(yscrollcommand=self.scrollbar_y.set)

        self.scrollbar_x = ttk.Scrollbar(self.root, orient="horizontal", command=self.canvas.xview)
        self.scrollbar_x.pack(fill=tk.X)
        self.canvas.configure(xscrollcommand=self.scrollbar_x.set)

        # Frame ch·ª©a ·∫£nh b√™n trong canvas (ƒë·ªÉ auto scroll)
        self.image_frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.image_frame, anchor="nw")

        self.image_label = tk.Label(self.image_frame)
        self.image_label.pack()

        # ===== OCR button =====
        self.btn_ocr = ttk.Button(self.root, text="üîç Nh·∫≠n di·ªán ch·ªØ", command=self.dummy_ocr)
        self.btn_ocr.pack(pady=10)

        # ===== Text box hi·ªÉn th·ªã k·∫øt qu·∫£ OCR =====
        self.text_box = scrolledtext.ScrolledText(self.root, height=5, font=("Consolas", 12))
        self.text_box.pack(padx=10, pady=10, fill=tk.BOTH, expand=False)

        # ===== N√∫t sinh m√£ v√† k·∫øt qu·∫£ =====
        self.btn_generate_code = ttk.Button(self.root, text="üß† Sinh m√£ th√†nh ph·∫©m", command=self.dummy_generate_code)
        self.btn_generate_code.pack(pady=10)

        self.result_label = tk.Label(self.root, text="M√£ th√†nh ph·∫©m: Ch∆∞a c√≥", font=("Arial", 14, "bold"), fg="blue")
        self.result_label.pack(pady=10)

        # B·∫Øt s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc canvas ƒë·ªÉ update scrollregion
        self.canvas.bind("<Configure>", self.update_scrollregion)

    def paste_image(self):
        img = ImageGrab.grabclipboard()
        if img:
            self.original_img = img
            self.tk_img = ImageTk.PhotoImage(img)
            self.image_label.config(image=self.tk_img)
            self.update_scrollregion()
        else:
            self.image_label.config(text="Kh√¥ng t√¨m th·∫•y ·∫£nh!", image="", bg="#f8f8f8")

    def update_scrollregion(self, event=None):
        self.canvas.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))

    def dummy_ocr(self):
        def real_ocr(self):
            if hasattr(self, 'original_img'):
                # D√πng pytesseract ƒë·ªÉ OCR ·∫£nh
                text = pytesseract.image_to_string(self.original_img)

                # Xo√° tr·∫Øng v√πng k·∫øt qu·∫£ v√† ƒë∆∞a v√†o l·∫°i
                self.text_box.delete("1.0", tk.END)
                self.text_box.insert(tk.END, text.strip())

                # N·∫øu c√≥ Label hi·ªÉn th·ªã b√™n ngo√†i th√¨ c≈©ng update lu√¥n:
                if hasattr(self, 'ocr_result_label'):
                    self.ocr_result_label.config(text=text.strip())
            else:
                self.text_box.delete("1.0", tk.END)
                self.text_box.insert(tk.END, "‚ùå Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán.")

    def dummy_generate_code(self):
        self.result_label.config(text="M√£ th√†nh ph·∫©m: XX18GCAXXXXXXLXTT")

# Kh·ªüi ch·∫°y app
if __name__ == "__main__":
    root = tk.Tk()
    app = OCRMelamineApp(root)
    root.mainloop()
